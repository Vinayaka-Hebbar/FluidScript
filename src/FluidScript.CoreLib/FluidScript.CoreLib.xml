<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluidScript.CoreLib</name>
    </assembly>
    <members>
        <member name="T:FluidScript.Collections.IEnumerator">
            <summary>
            Supports a simple iteration over a nongeneric collection.
            </summary>
        </member>
        <member name="T:FluidScript.Collections.IEnumerator`1">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <typeparam name="T">
            The type of objects to enumerate.This type parameter is covariant. That is, you
            can use either the type you specified or any type that is more derived. For more
            information about covariance and contravariance, see Covariance and Contravariance
            in Generics.
            </typeparam>
        </member>
        <member name="T:FluidScript.Collections.IList">
            <inheritdoc/>
        </member>
        <member name="T:FluidScript.Collections.List`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index. Provides
            methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:FluidScript.Collections.List`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Collections.List`1"/> class that
            is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:FluidScript.Collections.List`1.#ctor(System.Int32)">
            <summary>
            Adds an object to the end of the <see cref="T:FluidScript.Collections.List`1"/>
            </summary>
            <param name="capacity">
            The object to be added to the end of the System.Collections.Generic.List`1. The
            value can be null for reference types.
            </param>        
        </member>
        <member name="P:FluidScript.Collections.List`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold
            without resizing.
            </summary>
        </member>
        <member name="P:FluidScript.Collections.List`1.Count">
            <summary>
            Read-only property describing how many elements are in the List.
            </summary>
        </member>
        <member name="P:FluidScript.Collections.List`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.Add(`0)">
            <summary>
            Adds the given object to the end of this list. The size of the list is
            increased by one. If required, the capacity of the list is doubled
            before adding the new element.
            </summary>
        </member>
        <member name="M:FluidScript.Collections.List`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the System.Collections.Generic.List`1 at the specified
            index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:FluidScript.Collections.List`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:FluidScript.Collections.List`1"/>
            </summary>
        </member>
        <member name="M:FluidScript.Collections.List`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:FluidScript.Collections.List`1"/>
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:FluidScript.Collections.List`1"/>. The value can
            be null for reference types.
            </param>
            <returns>
            true if item is found in the <see cref="T:FluidScript.Collections.List`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.CopyTo(`0[])">
            <summary>
            Copies the entire <see cref="T:FluidScript.Collections.List`1"/> to a compatible one-dimensional
            array, starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied
            from <see cref="T:FluidScript.Collections.List`1"/>. The System.Array must have zero-based
            indexing.
            </param>
        </member>
        <member name="M:FluidScript.Collections.List`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:FluidScript.Collections.List`1"/> to a compatible one-dimensional
            array, starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied
            from <see cref="T:FluidScript.Collections.List`1"/>. The System.Array must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:FluidScript.Collections.List`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:FluidScript.Collections.List`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:FluidScript.Collections.List`1"/>. The value can
                be null for reference types.
            </param>
            <returns>
            true if item is successfully removed; otherwise, false. This method also returns
            false if item was not found in the <see cref="T:FluidScript.Collections.List`1"/>.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:FluidScript.Collections.List`1"/>.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
        </member>
        <member name="M:FluidScript.Collections.List`1.IndexOf(`0)">
            <summary>
            Inserts an element into the System.Collections.Generic.List`1 at the specified
            index.
            </summary>
            <param name="item">The zero-based index at which item should be inserted.</param>
            <returns>
            The object to insert. The value can be null for reference types.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:FluidScript.Collections.List`1"/>.
            </summary>
            <returns>
             A <see cref="T:FluidScript.Collections.List`1.Enumerator"/> for the <see cref="T:FluidScript.Collections.List`1"/>.
            </returns>
        </member>
        <member name="T:FluidScript.Collections.List`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:FluidScript.Collections.List`1"/>.
            </summary>
        </member>
        <member name="P:FluidScript.Collections.List`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:FluidScript.Collections.List`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:FluidScript.Collections.List`1"/>.Enumerator.
            </summary>
        </member>
        <member name="M:FluidScript.Collections.List`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:FluidScript.Collections.List`1"/>.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.Enumerator.HashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.Enumerator.__ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A System.String containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:FluidScript.Collections.List`1.Enumerator.__Equals(FluidScript.IFSObject)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise,
            false.
            </returns>
        </member>
        <member name="T:FluidScript.FSObject">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.FSObject.ToString">
            <inheritdoc/>
        </member>
        <member name="T:FluidScript.IFSObject">
            <summary>
            Supports all classes in the FluidScipt
            </summary>
        </member>
        <member name="M:FluidScript.IFSObject.__ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:FluidScript.IFSObject.__Equals(FluidScript.IFSObject)">
            <summary>
            Determines whether the specified <see cref="T:FluidScript.IFSObject"/> is equal to the current <see cref="T:FluidScript.IFSObject"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise,
            false.
            </returns>
        </member>
        <member name="M:FluidScript.IFSObject.HashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:FluidScript.IFSObject"/>.</returns>
        </member>
        <member name="T:FluidScript.Math">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other
            common mathematical functions.
            </summary>
        </member>
        <member name="M:FluidScript.Math.Pow(FluidScript.Double,FluidScript.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x"> A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number x raised to the power y.</returns>
        </member>
        <member name="M:FluidScript.Math.Sqrt(FluidScript.Double)">
             <summary>
             Returns the square root of a specified number.
             </summary>
             <param name="d"> A number.</param>
             <returns>
             One of the values in the following table. d parameter Return value Zero, or positive
            The positive square root of d. Negative System.Double.NaNEquals System.Double.NaNSystem.Double.NaNEquals
            System.Double.PositiveInfinitySystem.Double.PositiveInfinity
            </returns>
        </member>
        <member name="M:FluidScript.Math.Sin(FluidScript.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
            The sine of a. If a is equal to System.Double.NaN, System.Double.NegativeInfinity,
            or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Asin(FluidScript.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">
            A number representing a sine, where d must be greater than or equal to -1, but
            but less than or equal to 1.
            </param>
            <returns>
            An angle, θ, measured in radians, such that 0 ≤θ≤π-or- System.Double.NaN if d
            &lt; -1 or d &gt; 1 or d equals System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Sinh(FluidScript.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>
            The hyperbolic sine of value. If value is equal to System.Double.NegativeInfinity,
            System.Double.PositiveInfinity, or System.Double.NaN, this method returns a System.Double
            equal to value.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Cos(FluidScript.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>
            The cosine of d. If d is equal to System.Double.NaN, System.Double.NegativeInfinity,
             or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Acos(FluidScript.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">
            A number representing a cosine, where d must be greater than or equal to -1,
            but less than or equal to 1.
            </param>
            <returns>
            An angle, θ, measured in radians, such that 0 ≤θ≤π-or- System.Double.NaN if d
            &lt; -1 or d &gt; 1 or d equals System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Cosh(FluidScript.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>
            The hyperbolic cosine of value. If value is equal to System.Double.NegativeInfinity
            or System.Double.PositiveInfinity, System.Double.PositiveInfinity is returned.
            If value is equal to System.Double.NaN, System.Double.NaN is returned.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Tan(FluidScript.Double)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>
            The tangent of a. If a is equal to System.Double.NaN, System.Double.NegativeInfinity,
            or System.Double.PositiveInfinity, this method returns System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Atan(FluidScript.Double)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d"> A number representing a tangent.</param>
            <returns>
            An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- System.Double.NaN
            if d equals System.Double.NaN, -π/2 rounded to double precision (-1.5707963267949)
            if d equals System.Double.NegativeInfinity, or π/2 rounded to double precision
            (1.5707963267949) if d equals System.Double.PositiveInfinity.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Tanh(FluidScript.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>
            The hyperbolic tangent of value. If value is equal to System.Double.NegativeInfinity,
            this method returns -1. If value is equal to System.Double.PositiveInfinity,
            this method returns 1. If value is equal to System.Double.NaN, this method returns
            System.Double.NaN.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Round(FluidScript.Double,FluidScript.Integer)">
            <summary>
            Rounds a double-precision floating-point value to a specified number of fractional
            digits.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns>
            The number nearest to value that contains a number of fractional digits equal
            to digits.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            digits is less than 0 or greater than 15.
            </exception>
        </member>
        <member name="M:FluidScript.Math.Ceiling(FluidScript.Double)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified
            double-precision floating-point number.
            </summary>
            <param name="a">A double-precision floating-point number.</param>
            <returns>
            The smallest integral value that is greater than or equal to a. If a is equal
            to System.Double.NaN, System.Double.NegativeInfinity, or System.Double.PositiveInfinity,
            that value is returned. Note that this method returns a System.Double instead
            of an integral type.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Floor(FluidScript.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified double-precision
            floating-point number.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>
            The largest integer less than or equal to d. If d is equal to System.Double.NaN,
            System.Double.NegativeInfinity, or System.Double.PositiveInfinity, that value
            is returned.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Exp(FluidScript.Double)">
            <summary>
             Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power.</param>
            <returns>
            The number e raised to the power d. If d equals System.Double.NaN or System.Double.PositiveInfinity,
            that value is returned. If d equals System.Double.NegativeInfinity, 0 is returned.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Truncate(FluidScript.Double)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>
            The integral part of d; that is, the number that remains after any fractional
            digits have been discarded, or one of the values listed in the following table.
            dReturn 
            </returns>
        </member>
        <member name="M:FluidScript.Math.Sum(System.Collections.Generic.IEnumerable{FluidScript.IFSObject})">
            <summary>
            Computes the sum of a sequence of <see cref="T:FluidScript.Integer"/> values.
            </summary>
            <param name="list">
             A sequence of <see cref="T:FluidScript.IFSObject"/> values to calculate the sum of.
            </param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:FluidScript.Math.Average(System.Collections.Generic.IEnumerable{FluidScript.IFSObject})">
            <summary>
            Computes the average of a sequence of <see cref="T:FluidScript.Integer"/> values.
            </summary>
            <param name="list">
             A sequence of <see cref="T:FluidScript.IFSObject"/> values to calculate the average of.
            </param>
            <returns>The average of the values in the sequence.</returns>
        </member>
        <member name="M:FluidScript.Math.Max(System.Collections.Generic.IEnumerable{FluidScript.IFSObject})">
            <summary>
            Returns the maximum value in a sequence of <see cref="T:FluidScript.Integer"/> values.
            </summary>
            <param name="list">
            A sequence of <see cref="T:FluidScript.Integer"/> values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
        </member>
        <member name="M:FluidScript.Math.Min(System.Collections.Generic.IEnumerable{FluidScript.IFSObject})">
            <summary>
            Returns the minimum value in a sequence of <see cref="T:FluidScript.Integer"/> values.
            </summary>
            <param name="list">
            A sequence of <see cref="T:FluidScript.Integer"/> values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
        </member>
        <member name="T:FluidScript.Boolean">
            <summary>
            Represents a Boolean value.
            </summary>
        </member>
        <member name="F:FluidScript.Boolean.True">
            <summary>
            True
            </summary>
        </member>
        <member name="F:FluidScript.Boolean.False">
            <summary>
            False
            </summary>
        </member>
        <member name="M:FluidScript.Boolean.#ctor(System.Boolean)">
            <summary>
            Init New <see cref="T:FluidScript.Boolean"/> instance
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluidScript.Boolean.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Boolean.op_Implicit(System.Boolean)~FluidScript.Boolean">
            <summary>
            Implicit convert from <see cref="T:System.Boolean"/> to <see cref="T:FluidScript.Boolean"/>
            </summary>
        </member>
        <member name="M:FluidScript.Boolean.op_Implicit(FluidScript.Boolean)~System.Boolean">
            <summary>
            Implicit convert from <see cref="T:FluidScript.Boolean"/> to <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="M:FluidScript.Boolean.op_Equality(FluidScript.Boolean,FluidScript.Boolean)">
            <summary>
            op_Equality overload
            </summary>
        </member>
        <member name="M:FluidScript.Boolean.op_Inequality(FluidScript.Boolean,FluidScript.Boolean)">
            <summary>
            op_Inequality overload
            </summary>
        </member>
        <member name="T:FluidScript.Byte">
            <summary>
             Represents an 8-bit signed integer.
            </summary>
        </member>
        <member name="M:FluidScript.Byte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Byte"/>
            </summary>
        </member>
        <member name="M:FluidScript.Byte.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Char">
            <summary>
            Represents a character as a UTF-16 code unit.
            </summary>
        </member>
        <member name="F:FluidScript.Char.MinValue">
            <summary>
            Min char Value
            </summary>
        </member>
        <member name="F:FluidScript.Char.MaxValue">
            <summary>
            Max char Value
            </summary>
        </member>
        <member name="M:FluidScript.Char.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Char"/>
            </summary>
        </member>
        <member name="M:FluidScript.Char.HashCode">
            <summary>
            returns the hashCode() for the instance
            </summary>
        </member>
        <member name="M:FluidScript.Char.__ToString">
            <summary>
            converts to string
            </summary>
        </member>
        <member name="M:FluidScript.Char.__Equals(FluidScript.IFSObject)">
            <summary>
            checks <paramref name="other"/> and <see cref="T:FluidScript.Integer"/> are equals
            </summary>
        </member>
        <member name="M:FluidScript.Char.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Char.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Char.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Char.op_Implicit(System.Char)~FluidScript.Char">
            <summary>
            Implicit Convert from <see cref="T:System.Char"/> to <see cref="T:FluidScript.Char"/>
            </summary>
        </member>
        <member name="M:FluidScript.Char.op_Implicit(FluidScript.Char)~System.Char">
            <summary>
            Implicit Convert from <see cref="T:FluidScript.Char"/> to <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="M:FluidScript.Char.op_Implicit(FluidScript.Char)~System.Int32">
            <summary>
            Implicit Convert from <see cref="T:FluidScript.Char"/> to <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="T:FluidScript.Double">
            <summary>
            Represents a double-precision floating-point number.
            </summary>
        </member>
        <member name="M:FluidScript.Double.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Double"/>
            </summary>
        </member>
        <member name="M:FluidScript.Double.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Float">
            <summary>
            Represents a single-precision floating-point number.
            </summary>
        </member>
        <member name="M:FluidScript.Float.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Float"/>
            </summary>
        </member>
        <member name="M:FluidScript.Float.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Float.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Integer">
            <summary>
            Represents a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:FluidScript.Integer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Integer"/>
            </summary>
        </member>
        <member name="M:FluidScript.Integer.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Integer.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Long">
            <summary>
            Represents a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:FluidScript.Long.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Long"/>
            </summary>
        </member>
        <member name="M:FluidScript.Long.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Long.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Short">
            <summary>
            Represents a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:FluidScript.Short.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.Short"/>
            </summary>
        </member>
        <member name="M:FluidScript.Short.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToChar(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToSByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToByte(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToSingle(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToDouble(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="M:FluidScript.Short.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <internalonly/>
        </member>
        <member name="T:FluidScript.Runtime.RegisterAttribute">
            <summary>
            Runtime name of a property or method
            </summary>
        </member>
        <member name="F:FluidScript.Runtime.RegisterAttribute.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="M:FluidScript.Runtime.RegisterAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:FluidScript.Runtime.RegisterAttribute.DoGenerate">
            <summary>
            Should Method name is same as <see cref="F:FluidScript.Runtime.RegisterAttribute.Name"/>
            </summary>
        </member>
        <member name="M:FluidScript.Runtime.RegisterAttribute.Match(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Runtime.RegisterAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.Runtime.RegisterAttribute.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:FluidScript.String">
            <summary>
            Represents text as a series of Unicode characters.
            </summary>
        </member>
        <member name="M:FluidScript.String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluidScript.String"/>
            </summary>
        </member>
        <member name="P:FluidScript.String.Item(FluidScript.Integer)">
            <summary>
            Char Unicode at <paramref name="index"/>
            </summary>
        </member>
        <member name="M:FluidScript.String.__ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.HashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.__Equals(FluidScript.IFSObject)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.ToString">
            <inheritdoc/>
        </member>
        <member name="M:FluidScript.String.op_Implicit(System.String)~FluidScript.String">
            <summary>
            Implict conversion from <see cref="T:System.String"/> to <see cref="T:FluidScript.String"/>
            </summary>
        </member>
        <member name="M:FluidScript.String.op_Addition(FluidScript.String,FluidScript.String)">
            <summary>
            op_Addition overload
            </summary>
        </member>
        <member name="M:FluidScript.String.op_Equality(FluidScript.String,FluidScript.String)">
            <summary>
            op_Equality overload
            </summary>
        </member>
        <member name="M:FluidScript.String.op_Inequality(FluidScript.String,FluidScript.String)">
            <summary>
            op_InEquality overload
            </summary>
        </member>
    </members>
</doc>
